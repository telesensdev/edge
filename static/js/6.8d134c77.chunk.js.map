{"version":3,"sources":["app/components/pageLayout/PageLayout.js","@theme/useForm.js","app/pages/login/components/Content.js","app/pages/login/LoginPage.js"],"names":["useStyles","makeStyles","theme","page","width","height","display","flexDirection","overflowY","pageInnerScroll","overflow","content","padding","contentInnerScroll","userContent","maxWidth","formContent","maxContent","centerContent","margin","pageCenter","justifyContent","fullheight","flex","header","backgroundColor","palette","primary","dark","color","alignItems","flexShrink","minHeight","PageLayout","props","classes","load","className","clsx","innerScroll","bgCard","useForm","initialState","onSubmit","useState","form","setForm","handleChange","useCallback","event","persist","set","target","name","type","checked","value","handleCustomChange","resetForm","isEqual","setInForm","handleSubmit","preventDefault","card","DashboardContent","dispatch","useDispatch","error","useSelector","auth","login","email","password","Typography","variant","noValidate","ev","Actions","autoComplete","TextField","label","Boolean","autoFocus","onChange","required","fullWidth","Button","aria-label","disabled","length","process","LoginPage","Content"],"mappings":"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","file":"static/js/6.8d134c77.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport clsx from \"clsx\";\r\nimport Loading from \"../Loading\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    page: {\r\n        width: '100%',\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        overflowY: 'auto'\r\n    },\r\n    pageInnerScroll: {\r\n        overflow: 'hidden'\r\n    },\r\n    content: {\r\n        padding: 25,\r\n        display: 'flex',\r\n        width: '100%'\r\n    },\r\n    contentInnerScroll: {\r\n        overflow: 'hidden',\r\n        height: '100%',\r\n    },\r\n    userContent: {\r\n        maxWidth: 1380\r\n    },\r\n    formContent: {\r\n        maxWidth: 930\r\n    },\r\n    maxContent: {\r\n        maxWidth: 1920\r\n    },\r\n    centerContent: {\r\n        margin: '0 auto'\r\n    },\r\n    pageCenter: {\r\n        justifyContent: 'center'\r\n    },\r\n    fullheight: {\r\n        flex: 1\r\n    },\r\n    header: {\r\n        padding: 25,\r\n        backgroundColor: theme.palette.primary.dark,\r\n        color: '#fff',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        flexShrink: 0,\r\n        minHeight: 80\r\n    }\r\n}));\r\n\r\nfunction PageLayout(props) {\r\n\r\n    const classes = useStyles(props);\r\n\r\n    if (props.load) return <Loading/>;\r\n\r\n    return (\r\n        <div className={ clsx(\r\n            classes.page,\r\n            props.innerScroll && classes.pageInnerScroll,\r\n            props.pageCenter && classes.pageCenter,\r\n            props.bgCard && 'bg-card',\r\n        ) }>\r\n            {\r\n                props.header && (\r\n                    <div className={ classes.header }>\r\n                        { props.header }\r\n                    </div>\r\n                )\r\n            }\r\n            <div\r\n                className={\r\n                    clsx(\r\n                        classes.content,\r\n                        props.innerScroll && classes.contentInnerScroll,\r\n                        props.userContent && classes.userContent,\r\n                        props.formContent && classes.formContent,\r\n                        props.maxContent && classes.maxContent,\r\n                        props.centerContent && classes.centerContent,\r\n                        props.fullheight && classes.fullheight,\r\n                    )\r\n                }\r\n            >\r\n                { props.content }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PageLayout;","import { useCallback, useState } from 'react';\r\nimport set from 'lodash/set';\r\nimport isEqual from 'lodash/isEqual';\r\n\r\nfunction useForm(initialState, onSubmit) {\r\n    const [form, setForm] = useState(initialState);\r\n\r\n    const handleChange = useCallback((event) => {\r\n        event.persist();\r\n        setForm(form => set({ ...form }, event.target.name, event.target.type === 'checkbox' ? event.target.checked : event.target.value));\r\n    }, []);\r\n\r\n    const handleCustomChange = useCallback((value, name) => {\r\n        setForm(form => set({ ...form }, name, value));\r\n    }, []);\r\n\r\n    const resetForm = useCallback(() => {\r\n        if (!isEqual(initialState, form)) {\r\n            setForm(initialState);\r\n        }\r\n    }, [form, initialState]);\r\n\r\n    const setInForm = useCallback((name, value) => {\r\n        setForm({\r\n            ...form,\r\n            [name]: value\r\n        });\r\n    }, [form]);\r\n\r\n    const handleSubmit = useCallback((event) => {\r\n        if ( event )\r\n        {\r\n            event.preventDefault();\r\n        }\r\n        if ( onSubmit )\r\n        {\r\n            onSubmit();\r\n        }\r\n    }, [onSubmit]);\r\n\r\n    return {\r\n        form,\r\n        handleChange,\r\n        handleCustomChange,\r\n        handleSubmit,\r\n        resetForm,\r\n        setForm,\r\n        setInForm\r\n    }\r\n}\r\n\r\nexport default useForm;\r\n","import React from 'react';\r\nimport clsx from \"clsx\";\r\nimport { Button, TextField, Typography } from \"@material-ui/core\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport useForm from \"../../../../@theme/useForm\";\r\nimport * as Actions from \"../../../auth/store/actions\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    card: {\r\n        maxWidth: '400px',\r\n        width: '100%',\r\n    },\r\n}));\r\n\r\nfunction DashboardContent() {\r\n\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const error = useSelector(({ auth }) => auth.login.error);\r\n\r\n    const { form, handleChange } = useForm({\r\n        email: '',\r\n        password: '',\r\n    });\r\n\r\n    function isFormValid() {\r\n        return (\r\n            form.email.length > 0 &&\r\n            form.password.length > 0\r\n        );\r\n    }\r\n\r\n    function handleSubmit(ev) {\r\n        ev.preventDefault();\r\n        dispatch(Actions.submitLogin(form));\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex flex-col flex-auto flex-shrink-0 items-center justify-center\">\r\n\r\n            <div className=\"flex flex-col items-center justify-center w-full\">\r\n\r\n                <div className={ clsx(classes.card, 'flex flex-col items-center justify-center p-25 bg-card') }>\r\n\r\n                    <Typography\r\n                        variant=\"body1\"\r\n                        color=\"textSecondary\"\r\n                        className=\"text-18\"\r\n                    >\r\n                        Dashboard Login\r\n                    </Typography>\r\n\r\n                    <form\r\n                        name=\"loginForm\"\r\n                        noValidate\r\n                        className=\"flex flex-col justify-center w-full mt-25\"\r\n                        onSubmit={ handleSubmit }\r\n                        autoComplete=\"off\"\r\n                    >\r\n\r\n                        <TextField\r\n                            className=\"mb-16\"\r\n                            label=\"Email\"\r\n                            error={ Boolean(error) }\r\n                            autoFocus\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                            value={ form.email }\r\n                            onChange={ handleChange }\r\n                            variant=\"outlined\"\r\n                            color=\"primary\"\r\n                            required\r\n                            fullWidth\r\n                        />\r\n\r\n                        <TextField\r\n                            className=\"mb-16\"\r\n                            error={ Boolean(error) }\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            name=\"password\"\r\n                            value={ form.password }\r\n                            onChange={ handleChange }\r\n                            variant=\"outlined\"\r\n                            color=\"primary\"\r\n                            required\r\n                            fullWidth\r\n                        />\r\n\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className=\"w-full mx-auto mt-16\"\r\n                            aria-label=\"LOG IN\"\r\n                            disabled={ !isFormValid() }\r\n                            type=\"submit\"\r\n                        >\r\n                            LOGIN\r\n                        </Button>\r\n\r\n                    </form>\r\n                </div>\r\n\r\n                <div className=\"text-11 text-white mt-10\">\r\n                    v{ process.env.REACT_APP_VERSION }\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DashboardContent;","import React from 'react';\r\nimport Content from './components/Content';\r\nimport './style/login.scss';\r\nimport PageLayout from \"../../components/pageLayout/PageLayout\";\r\n\r\nfunction LoginPage() {\r\n\r\n    return (\r\n        <PageLayout\r\n            content={ <Content/> }\r\n            maxContent\r\n            pageCenter\r\n            centerContent\r\n        />\r\n    );\r\n}\r\n\r\nexport default LoginPage;\r\n"],"sourceRoot":""}